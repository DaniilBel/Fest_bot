import asyncio
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ChatPermissions, ReactionTypeEmoji
from decouple import config

from main import bot
from db.store import *

support_router = Router()
GROUP_CHAT_ID = config('GROUP')
emo = ["üëé", "üî•"]


@support_router.message(F.chat.type.in_({"group", "supergroup"}) & F.reply_to_message & ~F.text.startswith('/award') & ~F.text.startswith('/setpoints'))
async def forward_reply_to_user(message: Message):
    original_message = message.reply_to_message

    if original_message.message_id in message_mapping:
        user_id = message_mapping[original_message.message_id]

        react = ReactionTypeEmoji(emoji=emo[1])
        await message.react([react])

        if message.text:
            await bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{message.text}")
        elif message.photo:
            photo = message.photo[-1]
            await bot.send_photo(user_id, photo.file_id, caption="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–µ—à–∏–ª–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å —Ñ–æ—Ç–∫–æ–π")
        elif message.video:
            video = message.video
            await bot.send_video(user_id, video.file_id, caption="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–µ—à–∏–ª–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å –≤–∏–¥–µ–æ")
        elif message.video_chat_ended:
            video_note = message.video_note
            await bot.send_video(user_id, video_note.file_id, caption="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–µ—à–∏–ª–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å –∫—Ä—É–∂–æ—á–∫–æ–º")

        # del message_mapping[original_message.message_id]

    else:
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–æ—Å–ª–∞–Ω–æ –æ–±—Ä–∞—Ç–Ω–æ: {message.text}")


@support_router.message(F.chat.type.in_({"group", "supergroup"}) & F.reply_to_message & F.text.startswith('/award'))
async def handle_support_award(message: Message):
    original_message = message.reply_to_message

    if original_message.message_id in message_mapping:
        user_id = message_mapping[original_message.message_id]

        try:
            _, points = message.text.split()
            points = int(points)
        except ValueError:
            await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç `/award <points>`")
            return

        if points == 0:
            await bot.send_message(user_id, "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –∑–∞—á—Ç–µ–Ω–æ.")

        user_info = await get_all_users()
        user_points = await get_user_info(user_id)
        p = user_points['points']

        if user_id in user_info['user_id']:
            await update_user_points(user_id, p + points)
        else:
            await update_user_points(user_id, points)

        await bot.send_message(user_id, "–ó–∞–¥–∞–Ω–∏–µ –∑–∞—á—Ç–µ–Ω–æ.")
        await message.answer(f"–ò–≥—Ä–æ–∫ —Å id {user_id} –ø–æ–ª—É—á–∏–ª {points} —á–µ–≥–æ-—Ç–æ –æ—Ç {message.from_user.username}. "
                             f"–°–µ–π—á–∞—Å —É –Ω–µ–≥–æ {user_points.get(user_id)} —á–µ–≥–æ-—Ç–æ")

        # Optionally, remove the message from pending after points are awarded
        del message_mapping[original_message.message_id]


@support_router.message(F.chat.type.in_({"group", "supergroup"}) & F.text.startswith('/setpoints'))
async def handle_edit_points(message: Message):
    try:
        # Parse the command /edit_points <user_id> <points>
        _, user_id, points = message.text.split()
        user_id = int(user_id)
        points = int(points)

        user_points = await get_user_info(user_id)
        username = user_points['name']
        p = user_points['points']

        # Edit the user's points manually
        await update_user_points(user_id, points)
        # Inform the support member and the user about the updated points
        await message.answer(f"–£ –∏–≥—Ä–æ–∫–∞ {username}({user_id}) –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–æ {points}. "
                             f"–ò–∑–º–µ–Ω–∏–ª {message.from_user.username}")
        await bot.send_message(user_id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    except ValueError:
        await message.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç `/setpoints <user_id> <points>`")
    except KeyError:
        await message.answer("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def unrestrict_user(user_id: int):
    """Function to lift restriction after 5 minutes."""
    await asyncio.sleep(180)
    if user_id in restricted_users:
        await bot.restrict_chat_member(
            GROUP_CHAT_ID,
            user_id,
            ChatPermissions(can_send_messages=True)  # Allow sending messages again
        )
        restricted_users.pop(user_id)

        await bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")


